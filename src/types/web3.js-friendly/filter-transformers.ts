// Remove Unsupported Methods from an RpcInterface
type RemoveUnsupportedMethods<T, SupportedMethods extends readonly string[]> = {
  [P in keyof T]: {
    [K in keyof T[P] as `${P & string}_${K & string}` extends SupportedMethods[number] ? K : never]: T[P][K];
  };
};

// Remove Empty Properties from an RpcInterface that results from applying RemoveUnsupportedMethods:
// This is a description of what it does:
// It creates a mapped type where each property P of the input type T is checked against Record<string, never>, which is the type for an empty object.
// And If the property type extends Record<string, never>, it is mapped to never and thus excluded.
// Otherwise, the key is allowed to remain.
// Finally, `Pick` is used to extract only the properties that are not set to never, effectively removing "empty" types from the passed type.
type RemoveEmptyProps<T> = Pick<
  T,
  {
    [K in keyof T]: T[K] extends Record<string, never> ? never : K;
  }[keyof T]
>;

/**
 * Remove Unsupported Methods and then remove the resulted Empty Properties from an RpcInterface
 * @example
 * type SupportedMethods = ['chain_getBlock', 'chain_getBlockHash'];
 * type RpcInterface = {
 *   beefy: {
 *     getFinalizedHead: () => Promise<H256>;
 *     subscribeJustifications: () => Promise<BeefyVersionedFinalityProof>;
 *   };
 *   chain: {
 *     getBlock: (hash?: BlockHash | string | Uint8Array) => Promise<SignedBlock>;
 *     getBlockHash: (blockNumber?: BlockNumber | AnyNumber | Uint8Array) => Promise<BlockHash>;
 *     getFinalizedHead: () => Promise<BlockHash>;
 *   };
 * };
 * type Filtered = Filter<RpcApiFlattened, SupportedMethods>;
 * // Filtered is:
 * // {
 * //   chain_getBlock: (hash?: string | Uint8Array | Bytes) => Promise<SignedBlock>;
 * //   chain_getBlockHash: (blockNumber?: BlockNumber | AnyNumber) => Promise<Hash>;
 * // }
 * @template RpcInterface - The type to filter - typically a RpcInterface generated by `typegen`
 * @template SupportedMethods - The supported methods to filter the type T with.
 * Note: If you are using a typeof const, you need to have that const variable defined with `as const`, in order to get it as a literal type.
 * @returns The filtered type
 */
export type Filter<RpcInterface, SupportedMethods extends readonly string[]> = RemoveEmptyProps<
  RemoveUnsupportedMethods<RpcInterface, SupportedMethods>
>;
